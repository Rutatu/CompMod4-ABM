#making sure that the value of perceived support stays in a range from 0 to 10
ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] >= 10 ,AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 10, ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <= 0, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 0,  AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]))
#finding out the changed perceived support level
Perceived_Support_update <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]
#PERCEIVED SUPPORT BUFFERS AGAINST DISTRESS
#calculating the individual buffer (%), which is determined by the perceived support level, and indicates by how much perceived support buffers against distress
individual_buffer <- Perceived_Support_update / 11
#individual buffer together with the set impact value of the event determines the amount of distress that is going to be subtracted from the distress level after the event has happened
AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] - (Happened_Events$Impact[k] * individual_buffer)
#LIKELIHOOD OF MAJOR DEPRESSIVE DISORDER ONSET
#setting different distress thresholds for Major Depressive Disorder onset in low and high vulnerability groups
#I grab those in low vulnerability group with distress level bigger than 40
Low_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "L" & AgentPop$Distress >= 40]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[Low_Vulnerability] <- 1
#I grab those in high vulnerability group with distress level bigger than 13.33 (there is a threefold increased risk of MDD onset in a high vulnerability group)
High_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "H" & AgentPop$Distress >= 13.33]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[High_Vulnerability] <- 1
}
}
######## Simulation Ends ########
#Count of MDD onset in Low and High Vulnerability groups
c <- AgentPop %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
#visualize MDD onset count for different intervals of perceived support in both vulnerability groups
plot(Distress ~ Perceived_Support, data = AgentPop)
ggplot(AgentPop, aes(x = Perceived_Support, y = Distress, colour = Vulnerability_Group)) +
geom_smooth(method = lm) + geom_hline(yintercept = 13.33, color='coral', linetype = "dashed")+ geom_hline(yintercept = 40, color='#00AFBB', linetype = "dashed") + geom_point() + ggtitle("Relationship between Perceived support and Distress level", "Received inappropriate support") + theme_classic()
#visualize how many of MDD onset in total are in L and H groups
ggplot(AgentPop, aes(x=Vulnerability_Group, y=MDD_onset)) + geom_bar(stat="identity", fill = "#00AFBB") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups", "Received inappropriate support") + theme_classic()
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Distress), sd = sd(Distress), max = max(Distress), min = min(Distress))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Inappropriate_Received_support_count))
View(c)
AgentPop$MDD_onset <- as.numeric(AgentPop$MDD_onset)
class(AgentPop$MDD_onset)
#Count of MDD onset in Low and High Vulnerability groups
c <- AgentPop %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
#visualize MDD onset count for different intervals of perceived support in both vulnerability groups
plot(Distress ~ Perceived_Support, data = AgentPop)
ggplot(AgentPop, aes(x = Perceived_Support, y = Distress, colour = Vulnerability_Group)) +
geom_smooth(method = lm) + geom_hline(yintercept = 13.33, color='coral', linetype = "dashed")+ geom_hline(yintercept = 40, color='#00AFBB', linetype = "dashed") + geom_point() + ggtitle("Relationship between Perceived support and Distress level", "Received inappropriate support") + theme_classic()
#visualize how many of MDD onset in total are in L and H groups
ggplot(AgentPop, aes(x=Vulnerability_Group, y=MDD_onset)) + geom_bar(stat="identity", fill = "#00AFBB") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups", "Received inappropriate support") + theme_classic()
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Distress), sd = sd(Distress), max = max(Distress), min = min(Distress))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Inappropriate_Received_support_count))
View(c)
AgentPop <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/Agent_Population.csv")
View(AgentPop)
######## Simulation Starts ########
#creating a for loop to go through all the events
for (k in 1:nrow(Happened_Events)){
#creating a for loop to go through all the agents in a populations
for (i in 1:nrow(AgentPop)){
#STRESSFUL EVENT INCREASE DISTRESS LEVEL
#determine which event with what valence happens
Event <- Happened_Events$Valence[k]
#events increase the distress level of agents
ifelse(Event >= -13 & Event <= -12 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 14, ifelse(Event > -12 & Event <= -8 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 7, ifelse(Event > -8 & Event <= -4 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 3, ifelse(Event > -4 & Event <= 0 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 1))))
#RECEIVED and PERCEIVED SUPPORT INTERACTION
#received support happens randomly to each agent during each event. There is a 33.33% chance for each scenario to happen: a)  agent receives appropriate support (1), b) agent receives inappropriate support (2), c) agent does not receive any support (3)
#how to keep track whether agent got or did not get received support (see how to save this kind of data)? Then I can run both ifelse at the same time and keep track of which scenario a-c happened
#determining which received support scenario (a-c) happens to the agent
Received_support <- data.frame(Received_Support = 1:3)
Received_support_sample <- sample_n(Received_support, 1, replace = TRUE)
#keeping track of how many times each agent received support
#ifelse(Received_support_sample == 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]])
ifelse(Received_support_sample == 2, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]])
#received support increases/decreases perceived support level depending on its appropriateness
#ifelse(Received_support_sample == 1, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] + 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
ifelse(Received_support_sample == 2, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] - 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
#making sure that the value of perceived support stays in a range from 0 to 10
ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] >= 10 ,AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 10, ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <= 0, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 0,  AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]))
#finding out the changed perceived support level
Perceived_Support_update <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]
#PERCEIVED SUPPORT BUFFERS AGAINST DISTRESS
#calculating the individual buffer (%), which is determined by the perceived support level, and indicates by how much perceived support buffers against distress
individual_buffer <- Perceived_Support_update / 11
#individual buffer together with the set impact value of the event determines the amount of distress that is going to be subtracted from the distress level after the event has happened
AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] - (Happened_Events$Impact[k] * individual_buffer)
#LIKELIHOOD OF MAJOR DEPRESSIVE DISORDER ONSET
#setting different distress thresholds for Major Depressive Disorder onset in low and high vulnerability groups
#I grab those in low vulnerability group with distress level bigger than 40
Low_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "L" & AgentPop$Distress >= 40]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[Low_Vulnerability] <- 1
#I grab those in high vulnerability group with distress level bigger than 13.33 (there is a threefold increased risk of MDD onset in a high vulnerability group)
High_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "H" & AgentPop$Distress >= 13.33]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[High_Vulnerability] <- 1
}
}
######## Simulation Ends ########
AgentPop$MDD_onset <- as.numeric(AgentPop$MDD_onset)
class(AgentPop$MDD_onset)
c <- AgentPop2 %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
ggplot(AgentPop2, aes(x = Perceived_Support, y = Distress, colour = Vulnerability_Group)) +
geom_smooth(method = lm) + geom_hline(yintercept = 13.33, color='coral', linetype = "dashed")+ geom_hline(yintercept = 40, color='#00AFBB', linetype = "dashed") + geom_point() + ggtitle("Relationship between Perceived support and Distress level", "Received appropriate support") + theme_classic()
#visualize how many of MDD onset in total are in L and H groups
ggplot(AgentPop2, aes(x=Vulnerability_Group, y=MDD_onset)) + geom_bar(stat="identity", fill = "#00AFBB") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups", "Received appropriate support") + theme_classic()
AgentPop2 %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop2 %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Distress), sd = sd(Distress), max = max(Distress), min = min(Distress))
AgentPop2 %>% group_by(Vulnerability_Group) %>% summarise(sum(Appropriate_Received_support_count))
View(c)
#Count of MDD onset in Low and High Vulnerability groups
c <- AgentPop %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
#visualize MDD onset count for different intervals of perceived support in both vulnerability groups
plot(Distress ~ Perceived_Support, data = AgentPop)
ggplot(AgentPop, aes(x = Perceived_Support, y = Distress, colour = Vulnerability_Group)) +
geom_smooth(method = lm) + geom_hline(yintercept = 13.33, color='coral', linetype = "dashed")+ geom_hline(yintercept = 40, color='#00AFBB', linetype = "dashed") + geom_point() + ggtitle("Relationship between Perceived support and Distress level", "Received inappropriate support") + theme_classic()
#visualize how many of MDD onset in total are in L and H groups
ggplot(AgentPop, aes(x=Vulnerability_Group, y=MDD_onset)) + geom_bar(stat="identity", fill = "#00AFBB") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups", "Received inappropriate support") + theme_classic()
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Distress), sd = sd(Distress), max = max(Distress), min = min(Distress))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Inappropriate_Received_support_count))
View(c)
AgentPop <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/Agent_Population.csv")
#creating a for loop to go through all the events
for (k in 1:nrow(Happened_Events)){
#creating a for loop to go through all the agents in a populations
for (i in 1:nrow(AgentPop)){
#STRESSFUL EVENT INCREASE DISTRESS LEVEL
#determine which event with what valence happens
Event <- Happened_Events$Valence[k]
#events increase the distress level of agents
ifelse(Event >= -13 & Event <= -12 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 14, ifelse(Event > -12 & Event <= -8 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 7, ifelse(Event > -8 & Event <= -4 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 3, ifelse(Event > -4 & Event <= 0 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 1))))
#RECEIVED and PERCEIVED SUPPORT INTERACTION
#received support happens randomly to each agent during each event. There is a 33.33% chance for each scenario to happen: a)  agent receives appropriate support (1), b) agent receives inappropriate support (2), c) agent does not receive any support (3)
#how to keep track whether agent got or did not get received support (see how to save this kind of data)? Then I can run both ifelse at the same time and keep track of which scenario a-c happened
#determining which received support scenario (a-c) happens to the agent
Received_support <- data.frame(Received_Support = 1:3)
Received_support_sample <- sample_n(Received_support, 1, replace = TRUE)
#keeping track of how many times each agent received support
#ifelse(Received_support_sample == 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]])
#ifelse(Received_support_sample == 2, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]])
#received support increases/decreases perceived support level depending on its appropriateness
#ifelse(Received_support_sample == 1, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] + 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
#ifelse(Received_support_sample == 2, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] - 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
#making sure that the value of perceived support stays in a range from 0 to 10
ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] >= 10 ,AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 10, ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <= 0, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 0,  AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]))
#finding out the changed perceived support level
Perceived_Support_update <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]
#PERCEIVED SUPPORT BUFFERS AGAINST DISTRESS
#calculating the individual buffer (%), which is determined by the perceived support level, and indicates by how much perceived support buffers against distress
individual_buffer <- Perceived_Support_update / 11
#individual buffer together with the set impact value of the event determines the amount of distress that is going to be subtracted from the distress level after the event has happened
AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] - (Happened_Events$Impact[k] * individual_buffer)
#LIKELIHOOD OF MAJOR DEPRESSIVE DISORDER ONSET
#setting different distress thresholds for Major Depressive Disorder onset in low and high vulnerability groups
#I grab those in low vulnerability group with distress level bigger than 40
Low_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "L" & AgentPop$Distress >= 40]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[Low_Vulnerability] <- 1
#I grab those in high vulnerability group with distress level bigger than 13.33 (there is a threefold increased risk of MDD onset in a high vulnerability group)
High_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "H" & AgentPop$Distress >= 13.33]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[High_Vulnerability] <- 1
}
}
######## Simulation Ends ########
AgentPop$MDD_onset <- as.numeric(AgentPop$MDD_onset)
class(AgentPop$MDD_onset)
#Count of MDD onset in Low and High Vulnerability groups
c <- AgentPop %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
#visualize MDD onset count for different intervals of perceived support in both vulnerability groups
plot(Distress ~ Perceived_Support, data = AgentPop)
ggplot(AgentPop, aes(x = Perceived_Support, y = Distress, colour = Vulnerability_Group)) +
geom_smooth(method = lm) + geom_hline(yintercept = 13.33, color='coral', linetype = "dashed")+ geom_hline(yintercept = 40, color='#00AFBB', linetype = "dashed") + geom_point() + ggtitle("Relationship between Perceived support and Distress level", "No Received support") + theme_classic()
#visualize how many of MDD onset in total are in L and H groups
ggplot(AgentPop, aes(x=Vulnerability_Group, y=MDD_onset)) + geom_bar(stat="identity", fill = "#00AFBB") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups", "No Received support") + theme_classic()
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Distress), sd = sd(Distress), max = max(Distress), min = min(Distress))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Appropriate_Received_support_count))
View(c)
write.csv(AgentPop, "4.csv")
View(AgentPop)
AgentPop <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/Agent_Population.csv")
View(AgentPop)
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/Agent_Population.csv")
######## Simulation Starts ########
#creating a for loop to go through all the events
for (k in 1:nrow(Happened_Events)){
#creating a for loop to go through all the agents in a populations
for (i in 1:nrow(AgentPop)){
#STRESSFUL EVENT INCREASE DISTRESS LEVEL
#determine which event with what valence happens
Event <- Happened_Events$Valence[k]
#events increase the distress level of agents
ifelse(Event >= -13 & Event <= -12 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 14, ifelse(Event > -12 & Event <= -8 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 7, ifelse(Event > -8 & Event <= -4 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 3, ifelse(Event > -4 & Event <= 0 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 1))))
#RECEIVED and PERCEIVED SUPPORT INTERACTION
#received support happens randomly to each agent during each event. There is a 33.33% chance for each scenario to happen: a)  agent receives appropriate support (1), b) agent receives inappropriate support (2), c) agent does not receive any support (3)
#how to keep track whether agent got or did not get received support (see how to save this kind of data)? Then I can run both ifelse at the same time and keep track of which scenario a-c happened
#determining which received support scenario (a-c) happens to the agent
Received_support <- data.frame(Received_Support = 1:3)
Received_support_sample <- sample_n(Received_support, 1, replace = TRUE)
#keeping track of how many times each agent received support
ifelse(Received_support_sample == 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]])
ifelse(Received_support_sample == 2, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]])
#received support increases/decreases perceived support level depending on its appropriateness
ifelse(Received_support_sample == 1, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] + 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
ifelse(Received_support_sample == 2, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] - 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
#making sure that the value of perceived support stays in a range from 0 to 10
ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] >= 10 ,AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 10, ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <= 0, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 0,  AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]))
#finding out the changed perceived support level
Perceived_Support_update <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]
#PERCEIVED SUPPORT BUFFERS AGAINST DISTRESS
#calculating the individual buffer (%), which is determined by the perceived support level, and indicates by how much perceived support buffers against distress
individual_buffer <- Perceived_Support_update / 11
#individual buffer together with the set impact value of the event determines the amount of distress that is going to be subtracted from the distress level after the event has happened
AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] - (Happened_Events$Impact[k] * individual_buffer)
#LIKELIHOOD OF MAJOR DEPRESSIVE DISORDER ONSET
#setting different distress thresholds for Major Depressive Disorder onset in low and high vulnerability groups
#I grab those in low vulnerability group with distress level bigger than 40
Low_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "L" & AgentPop$Distress >= 40]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[Low_Vulnerability] <- 1
#I grab those in high vulnerability group with distress level bigger than 13.33 (there is a threefold increased risk of MDD onset in a high vulnerability group)
High_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "H" & AgentPop$Distress >= 13.33]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[High_Vulnerability] <- 1
}
}
######## Simulation Ends ########
View(AgentPop)
write.csv(AgentPop, "1.csv")
AgentPop$MDD_onset <- as.numeric(AgentPop$MDD_onset)
class(AgentPop$MDD_onset)
#Count of MDD onset in Low and High Vulnerability groups
c <- AgentPop %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
#visualize MDD onset count for different intervals of perceived support in both vulnerability groups
plot(Distress ~ Perceived_Support, data = AgentPop)
ggplot(AgentPop, aes(x = Perceived_Support, y = Distress, colour = Vulnerability_Group)) +
geom_smooth(method = lm) + geom_hline(yintercept = 13.33, color='coral', linetype = "dashed")+ geom_hline(yintercept = 40, color='#00AFBB', linetype = "dashed") + geom_point() + ggtitle("Relationship between Perceived support and Distress level", "Received appropriate and inappropriate support") + theme_classic()
#visualize how many of MDD onset in total are in L and H groups
ggplot(AgentPop, aes(x=Vulnerability_Group, y=MDD_onset)) + geom_bar(stat="identity", fill = "#00AFBB") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups", "Received appropriate and inappropriate support") + theme_classic()
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Distress), sd = sd(Distress), max = max(Distress), min = min(Distress))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Appropriate_Received_support_count))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Inappropriate_Received_support_count))
View(c)
#with the function created above I generate a dataset with desired number of events with desired valence
Happened_Events <- Events_f(0, 2, 4, 8)
Happened_Events$Impact <- as.numeric(Happened_Events$Impact)
class(Happened_Events$Impact)
AgentPop <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/Agent_Population.csv")
######## Simulation Starts ########
#creating a for loop to go through all the events
for (k in 1:nrow(Happened_Events)){
#creating a for loop to go through all the agents in a populations
for (i in 1:nrow(AgentPop)){
#STRESSFUL EVENT INCREASE DISTRESS LEVEL
#determine which event with what valence happens
Event <- Happened_Events$Valence[k]
#events increase the distress level of agents
ifelse(Event >= -13 & Event <= -12 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 14, ifelse(Event > -12 & Event <= -8 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 7, ifelse(Event > -8 & Event <= -4 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 3, ifelse(Event > -4 & Event <= 0 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 1))))
#RECEIVED and PERCEIVED SUPPORT INTERACTION
#received support happens randomly to each agent during each event. There is a 33.33% chance for each scenario to happen: a)  agent receives appropriate support (1), b) agent receives inappropriate support (2), c) agent does not receive any support (3)
#how to keep track whether agent got or did not get received support (see how to save this kind of data)? Then I can run both ifelse at the same time and keep track of which scenario a-c happened
#determining which received support scenario (a-c) happens to the agent
Received_support <- data.frame(Received_Support = 1:3)
Received_support_sample <- sample_n(Received_support, 1, replace = TRUE)
#keeping track of how many times each agent received support
ifelse(Received_support_sample == 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]])
ifelse(Received_support_sample == 2, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]])
#received support increases/decreases perceived support level depending on its appropriateness
ifelse(Received_support_sample == 1, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] + 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
ifelse(Received_support_sample == 2, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] - 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
#making sure that the value of perceived support stays in a range from 0 to 10
ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] >= 10 ,AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 10, ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <= 0, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 0,  AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]))
#finding out the changed perceived support level
Perceived_Support_update <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]
#PERCEIVED SUPPORT BUFFERS AGAINST DISTRESS
#calculating the individual buffer (%), which is determined by the perceived support level, and indicates by how much perceived support buffers against distress
individual_buffer <- Perceived_Support_update / 11
#individual buffer together with the set impact value of the event determines the amount of distress that is going to be subtracted from the distress level after the event has happened
AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] - (Happened_Events$Impact[k] * individual_buffer)
#LIKELIHOOD OF MAJOR DEPRESSIVE DISORDER ONSET
#setting different distress thresholds for Major Depressive Disorder onset in low and high vulnerability groups
#I grab those in low vulnerability group with distress level bigger than 40
Low_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "L" & AgentPop$Distress >= 40]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[Low_Vulnerability] <- 1
#I grab those in high vulnerability group with distress level bigger than 13.33 (there is a threefold increased risk of MDD onset in a high vulnerability group)
High_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "H" & AgentPop$Distress >= 13.33]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[High_Vulnerability] <- 1
}
}
######## Simulation Ends ########
AgentPop$MDD_onset <- as.numeric(AgentPop$MDD_onset)
class(AgentPop$MDD_onset)
#Count of MDD onset in Low and High Vulnerability groups
c <- AgentPop %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
#visualize MDD onset count for different intervals of perceived support in both vulnerability groups
plot(Distress ~ Perceived_Support, data = AgentPop)
ggplot(AgentPop, aes(x = Perceived_Support, y = Distress, colour = Vulnerability_Group)) +
geom_smooth(method = lm) + geom_hline(yintercept = 13.33, color='coral', linetype = "dashed")+ geom_hline(yintercept = 40, color='#00AFBB', linetype = "dashed") + geom_point() + ggtitle("Relationship between Perceived support and Distress level", "Received appropriate and inappropriate support") + theme_classic()
#visualize how many of MDD onset in total are in L and H groups
ggplot(AgentPop, aes(x=Vulnerability_Group, y=MDD_onset)) + geom_bar(stat="identity", fill = "#00AFBB") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups", "Received appropriate and inappropriate support") + theme_classic()
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Distress), sd = sd(Distress), max = max(Distress), min = min(Distress))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Appropriate_Received_support_count))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Inappropriate_Received_support_count))
View(c)
#with the function created above I generate a dataset with desired number of events with desired valence
Happened_Events <- Events_f(0, 2, 8, 20)
Happened_Events$Impact <- as.numeric(Happened_Events$Impact)
class(Happened_Events$Impact)
AgentPop <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/Agent_Population.csv")
######## Simulation Starts ########
#creating a for loop to go through all the events
for (k in 1:nrow(Happened_Events)){
#creating a for loop to go through all the agents in a populations
for (i in 1:nrow(AgentPop)){
#STRESSFUL EVENT INCREASE DISTRESS LEVEL
#determine which event with what valence happens
Event <- Happened_Events$Valence[k]
#events increase the distress level of agents
ifelse(Event >= -13 & Event <= -12 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 14, ifelse(Event > -12 & Event <= -8 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 7, ifelse(Event > -8 & Event <= -4 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 3, ifelse(Event > -4 & Event <= 0 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 1))))
#RECEIVED and PERCEIVED SUPPORT INTERACTION
#received support happens randomly to each agent during each event. There is a 33.33% chance for each scenario to happen: a)  agent receives appropriate support (1), b) agent receives inappropriate support (2), c) agent does not receive any support (3)
#how to keep track whether agent got or did not get received support (see how to save this kind of data)? Then I can run both ifelse at the same time and keep track of which scenario a-c happened
#determining which received support scenario (a-c) happens to the agent
Received_support <- data.frame(Received_Support = 1:3)
Received_support_sample <- sample_n(Received_support, 1, replace = TRUE)
#keeping track of how many times each agent received support
ifelse(Received_support_sample == 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]])
ifelse(Received_support_sample == 2, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]])
#received support increases/decreases perceived support level depending on its appropriateness
ifelse(Received_support_sample == 1, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] + 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
ifelse(Received_support_sample == 2, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] - 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
#making sure that the value of perceived support stays in a range from 0 to 10
ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] >= 10 ,AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 10, ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <= 0, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 0,  AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]))
#finding out the changed perceived support level
Perceived_Support_update <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]
#PERCEIVED SUPPORT BUFFERS AGAINST DISTRESS
#calculating the individual buffer (%), which is determined by the perceived support level, and indicates by how much perceived support buffers against distress
individual_buffer <- Perceived_Support_update / 11
#individual buffer together with the set impact value of the event determines the amount of distress that is going to be subtracted from the distress level after the event has happened
AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] - (Happened_Events$Impact[k] * individual_buffer)
#LIKELIHOOD OF MAJOR DEPRESSIVE DISORDER ONSET
#setting different distress thresholds for Major Depressive Disorder onset in low and high vulnerability groups
#I grab those in low vulnerability group with distress level bigger than 40
Low_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "L" & AgentPop$Distress >= 40]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[Low_Vulnerability] <- 1
#I grab those in high vulnerability group with distress level bigger than 13.33 (there is a threefold increased risk of MDD onset in a high vulnerability group)
High_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "H" & AgentPop$Distress >= 13.33]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[High_Vulnerability] <- 1
}
}
######## Simulation Ends ########
AgentPop$MDD_onset <- as.numeric(AgentPop$MDD_onset)
class(AgentPop$MDD_onset)
#Count of MDD onset in Low and High Vulnerability groups
c <- AgentPop %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
#visualize MDD onset count for different intervals of perceived support in both vulnerability groups
plot(Distress ~ Perceived_Support, data = AgentPop)
ggplot(AgentPop, aes(x = Perceived_Support, y = Distress, colour = Vulnerability_Group)) +
geom_smooth(method = lm) + geom_hline(yintercept = 13.33, color='coral', linetype = "dashed")+ geom_hline(yintercept = 40, color='#00AFBB', linetype = "dashed") + geom_point() + ggtitle("Relationship between Perceived support and Distress level", "Received appropriate and inappropriate support") + theme_classic()
#visualize how many of MDD onset in total are in L and H groups
ggplot(AgentPop, aes(x=Vulnerability_Group, y=MDD_onset)) + geom_bar(stat="identity", fill = "#00AFBB") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups", "Received appropriate and inappropriate support") + theme_classic()
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Distress), sd = sd(Distress), max = max(Distress), min = min(Distress))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Appropriate_Received_support_count))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Inappropriate_Received_support_count))
View(c)
AgentPop <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/Agent_Population.csv")
######## Simulation Starts ########
#creating a for loop to go through all the events
for (k in 1:nrow(Happened_Events)){
#creating a for loop to go through all the agents in a populations
for (i in 1:nrow(AgentPop)){
#STRESSFUL EVENT INCREASE DISTRESS LEVEL
#determine which event with what valence happens
Event <- Happened_Events$Valence[k]
#events increase the distress level of agents
ifelse(Event >= -13 & Event <= -12 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 14, ifelse(Event > -12 & Event <= -8 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 7, ifelse(Event > -8 & Event <= -4 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 3, ifelse(Event > -4 & Event <= 0 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 1))))
#RECEIVED and PERCEIVED SUPPORT INTERACTION
#received support happens randomly to each agent during each event. There is a 33.33% chance for each scenario to happen: a)  agent receives appropriate support (1), b) agent receives inappropriate support (2), c) agent does not receive any support (3)
#how to keep track whether agent got or did not get received support (see how to save this kind of data)? Then I can run both ifelse at the same time and keep track of which scenario a-c happened
#determining which received support scenario (a-c) happens to the agent
Received_support <- data.frame(Received_Support = 1:3)
Received_support_sample <- sample_n(Received_support, 1, replace = TRUE)
#keeping track of how many times each agent received support
ifelse(Received_support_sample == 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]])
#ifelse(Received_support_sample == 2, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]])
#received support increases/decreases perceived support level depending on its appropriateness
ifelse(Received_support_sample == 1, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] + 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
#ifelse(Received_support_sample == 2, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] - 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
#making sure that the value of perceived support stays in a range from 0 to 10
ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] >= 10 ,AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 10, ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <= 0, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 0,  AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]))
#finding out the changed perceived support level
Perceived_Support_update <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]
#PERCEIVED SUPPORT BUFFERS AGAINST DISTRESS
#calculating the individual buffer (%), which is determined by the perceived support level, and indicates by how much perceived support buffers against distress
individual_buffer <- Perceived_Support_update / 11
#individual buffer together with the set impact value of the event determines the amount of distress that is going to be subtracted from the distress level after the event has happened
AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] - (Happened_Events$Impact[k] * individual_buffer)
#LIKELIHOOD OF MAJOR DEPRESSIVE DISORDER ONSET
#setting different distress thresholds for Major Depressive Disorder onset in low and high vulnerability groups
#I grab those in low vulnerability group with distress level bigger than 40
Low_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "L" & AgentPop$Distress >= 40]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[Low_Vulnerability] <- 1
#I grab those in high vulnerability group with distress level bigger than 13.33 (there is a threefold increased risk of MDD onset in a high vulnerability group)
High_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "H" & AgentPop$Distress >= 13.33]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[High_Vulnerability] <- 1
}
}
######## Simulation Ends ########
AgentPop$MDD_onset <- as.numeric(AgentPop$MDD_onset)
class(AgentPop$MDD_onset)
c <- AgentPop %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
ggplot(AgentPop, aes(x = Perceived_Support, y = Distress, colour = Vulnerability_Group)) +
geom_smooth(method = lm) + geom_hline(yintercept = 13.33, color='coral', linetype = "dashed")+ geom_hline(yintercept = 40, color='#00AFBB', linetype = "dashed") + geom_point() + ggtitle("Relationship between Perceived support and Distress level", "Received appropriate support") + theme_classic()
#visualize how many of MDD onset in total are in L and H groups
ggplot(AgentPop, aes(x=Vulnerability_Group, y=MDD_onset)) + geom_bar(stat="identity", fill = "#00AFBB") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups", "Received appropriate support") + theme_classic()
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Distress), sd = sd(Distress), max = max(Distress), min = min(Distress))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Appropriate_Received_support_count))
View(c)
View(c)
AgentPop <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/Agent_Population.csv")
######## Simulation Starts ########
#creating a for loop to go through all the events
for (k in 1:nrow(Happened_Events)){
#creating a for loop to go through all the agents in a populations
for (i in 1:nrow(AgentPop)){
#STRESSFUL EVENT INCREASE DISTRESS LEVEL
#determine which event with what valence happens
Event <- Happened_Events$Valence[k]
#events increase the distress level of agents
ifelse(Event >= -13 & Event <= -12 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 14, ifelse(Event > -12 & Event <= -8 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 7, ifelse(Event > -8 & Event <= -4 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 3, ifelse(Event > -4 & Event <= 0 ,AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] + 1))))
#RECEIVED and PERCEIVED SUPPORT INTERACTION
#received support happens randomly to each agent during each event. There is a 33.33% chance for each scenario to happen: a)  agent receives appropriate support (1), b) agent receives inappropriate support (2), c) agent does not receive any support (3)
#how to keep track whether agent got or did not get received support (see how to save this kind of data)? Then I can run both ifelse at the same time and keep track of which scenario a-c happened
#determining which received support scenario (a-c) happens to the agent
Received_support <- data.frame(Received_Support = 1:3)
Received_support_sample <- sample_n(Received_support, 1, replace = TRUE)
#keeping track of how many times each agent received support
#ifelse(Received_support_sample == 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Appropriate_Received_support_count[AgentPop$AgentNo[i]])
ifelse(Received_support_sample == 2, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <-  AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] + 1, AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]] <- AgentPop$Inappropriate_Received_support_count[AgentPop$AgentNo[i]])
#received support increases/decreases perceived support level depending on its appropriateness
#ifelse(Received_support_sample == 1, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] + 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
ifelse(Received_support_sample == 2, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]] - 0.7, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]])
#making sure that the value of perceived support stays in a range from 0 to 10
ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] >= 10 ,AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 10, ifelse(AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <= 0, AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- 0,  AgentPop$Perceived_Support[AgentPop$AgentNo[i]] <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]))
#finding out the changed perceived support level
Perceived_Support_update <- AgentPop$Perceived_Support[AgentPop$AgentNo[i]]
#PERCEIVED SUPPORT BUFFERS AGAINST DISTRESS
#calculating the individual buffer (%), which is determined by the perceived support level, and indicates by how much perceived support buffers against distress
individual_buffer <- Perceived_Support_update / 11
#individual buffer together with the set impact value of the event determines the amount of distress that is going to be subtracted from the distress level after the event has happened
AgentPop$Distress[AgentPop$AgentNo[i]] <- AgentPop$Distress[AgentPop$AgentNo[i]] - (Happened_Events$Impact[k] * individual_buffer)
#LIKELIHOOD OF MAJOR DEPRESSIVE DISORDER ONSET
#setting different distress thresholds for Major Depressive Disorder onset in low and high vulnerability groups
#I grab those in low vulnerability group with distress level bigger than 40
Low_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "L" & AgentPop$Distress >= 40]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[Low_Vulnerability] <- 1
#I grab those in high vulnerability group with distress level bigger than 13.33 (there is a threefold increased risk of MDD onset in a high vulnerability group)
High_Vulnerability <- (1:nrow(AgentPop))[AgentPop$Vulnerability_Group == "H" & AgentPop$Distress >= 13.33]
#I set their MDD onset to 1 (meaning it is very likely that Major Depressive Disorder might have started)
AgentPop$MDD_onset[High_Vulnerability] <- 1
}
}
######## Simulation Ends ########
AgentPop$MDD_onset <- as.numeric(AgentPop$MDD_onset)
class(AgentPop$MDD_onset)
#Count of MDD onset in Low and High Vulnerability groups
c <- AgentPop %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
#visualize MDD onset count for different intervals of perceived support in both vulnerability groups
plot(Distress ~ Perceived_Support, data = AgentPop)
ggplot(AgentPop, aes(x = Perceived_Support, y = Distress, colour = Vulnerability_Group)) +
geom_smooth(method = lm) + geom_hline(yintercept = 13.33, color='coral', linetype = "dashed")+ geom_hline(yintercept = 40, color='#00AFBB', linetype = "dashed") + geom_point() + ggtitle("Relationship between Perceived support and Distress level", "Received inappropriate support") + theme_classic()
#visualize how many of MDD onset in total are in L and H groups
ggplot(AgentPop, aes(x=Vulnerability_Group, y=MDD_onset)) + geom_bar(stat="identity", fill = "#00AFBB") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups") + ggtitle("Count of Major Depressive Disorder onset in Low and High Vulnerability groups", "Received inappropriate support") + theme_classic()
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Perceived_Support), sd = sd(Perceived_Support))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(mean = mean(Distress), sd = sd(Distress), max = max(Distress), min = min(Distress))
AgentPop %>% group_by(Vulnerability_Group) %>% summarise(sum(Inappropriate_Received_support_count))
View(c)
View(AgentPop)
View(AgentPop)
write.csv(Happened_Events, "Happened_Events.csv")
AgentPop1 <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/1st event scenario appropriate received support/1.csv")
AgentPop1 <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/1.csv")
AgentPop1 <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/1.csv")
AgentPop1 <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/1.csv")
AgentPop1 <- read.csv(file = "~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models/1.csv")
View(AgentPop1)
#count of MDD onset in Low and High Vulnerability groups
AgentPop1 %>% group_by(Vulnerability_Group) %>% count(MDD_onset) %>% na.omit()
which git
which git
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Rutos SmuTkes/Cognitive Science/4th Semester/Social and cultural dynamics/ABM models")
library(tidyverse)
updateR()
library(installr)
updateR()
install.packages(c("dplyr", "ggplot2", "knitr", "tidyverse"))
install.packages("rlang")
install.packages("tidyverse")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
library(tidyverse)
